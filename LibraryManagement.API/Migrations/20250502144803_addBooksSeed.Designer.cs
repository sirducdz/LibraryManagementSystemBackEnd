// <auto-generated />
using System;
using LibraryManagement.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.API.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250502144803_addBooksSeed")]
    partial class addBooksSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Harper Lee",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A novel about injustice in the American South.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "To Kill a Mockingbird",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 2,
                            Author = "George Orwell",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A dystopian social science fiction novel and cautionary tale.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "1984",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 3,
                            Author = "F. Scott Fitzgerald",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A story about the American dream.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Great Gatsby",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 4,
                            Author = "Jane Austen",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A classic novel of manners.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Pride and Prejudice",
                            TotalQuantity = 5
                        },
                        new
                        {
                            Id = 5,
                            Author = "J.D. Salinger",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A story about teenage angst and alienation.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Catcher in the Rye",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.K. Rowling",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "The first book in the Harry Potter series.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.R.R. Tolkien",
                            AverageRating = 0.00m,
                            CategoryID = 1,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A fantasy novel and children's book.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Hobbit",
                            TotalQuantity = 7
                        },
                        new
                        {
                            Id = 8,
                            Author = "Stephen Hawking",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A landmark volume in science writing.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "A Brief History of Time",
                            TotalQuantity = 5
                        },
                        new
                        {
                            Id = 9,
                            Author = "Carl Sagan",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Explores the universe and our place within it.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Cosmos",
                            TotalQuantity = 2
                        },
                        new
                        {
                            Id = 10,
                            Author = "Richard Dawkins",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A book on evolution centered on the gene.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Selfish Gene",
                            TotalQuantity = 5
                        },
                        new
                        {
                            Id = 11,
                            Author = "Rachel Carson",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Documented the environmental harm caused by pesticides.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Silent Spring",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 12,
                            Author = "Charles Darwin",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Introduced the scientific theory of evolution by natural selection.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Origin of Species",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 13,
                            Author = "Richard P. Feynman",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Anecdotes by the Nobel Prize-winning physicist.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Surely You're Joking, Mr. Feynman!",
                            TotalQuantity = 2
                        },
                        new
                        {
                            Id = 14,
                            Author = "James D. Watson",
                            AverageRating = 0.00m,
                            CategoryID = 2,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "An autobiographical account of the discovery of the structure of DNA.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Double Helix",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 15,
                            Author = "Yuval Noah Harari",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "An exploration of human history.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Sapiens: A Brief History of Humankind",
                            TotalQuantity = 8
                        },
                        new
                        {
                            Id = 16,
                            Author = "Jared Diamond",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Explores the reasons for Eurasian societies' dominance.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Guns, Germs, and Steel",
                            TotalQuantity = 5
                        },
                        new
                        {
                            Id = 17,
                            Author = "Anne Frank",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "The writings from the diary kept by Anne Frank while she was in hiding.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Diary of a Young Girl",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 18,
                            Author = "Howard Zinn",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Presents American history from the perspective of common people.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "A People's History of the United States",
                            TotalQuantity = 7
                        },
                        new
                        {
                            Id = 19,
                            Author = "William L. Shirer",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A history of Nazi Germany.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Rise and Fall of the Third Reich",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 20,
                            Author = "David McCullough",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Focuses on the events surrounding the start of the American Revolutionary War.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "1776",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 21,
                            Author = "Thucydides",
                            AverageRating = 0.00m,
                            CategoryID = 3,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "An ancient Greek historical account of the war between Sparta and Athens.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Peloponnesian War",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 22,
                            Author = "Daniel Kahneman",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Summarizes research on cognitive biases.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Thinking, Fast and Slow",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 23,
                            Author = "Viktor Frankl",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Details his experiences as a prisoner in Nazi concentration camps.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Man's Search for Meaning",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 24,
                            Author = "Robert Cialdini",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Examines key ways people can be influenced.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Influence: The Psychology of Persuasion",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 25,
                            Author = "Sigmund Freud",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Introduces Freud's theory of the unconscious with respect to dream interpretation.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Interpretation of Dreams",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 26,
                            Author = "Mihaly Csikszentmihalyi",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Explores the concept of 'flow'.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Flow: The Psychology of Optimal Experience",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 27,
                            Author = "Susan Cain",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Argues that modern Western culture misunderstands and undervalues introverts.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Quiet: The Power of Introverts",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 28,
                            Author = "Dan Ariely",
                            AverageRating = 0.00m,
                            CategoryID = 4,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Challenges assumptions about our ability to make rational decisions.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Predictably Irrational",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 29,
                            Author = "Adam Smith",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A fundamental work in classical economics.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The Wealth of Nations",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 30,
                            Author = "Steven D. Levitt & Stephen J. Dubner",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Explores the hidden side of everything using economic principles.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Freakonomics",
                            TotalQuantity = 4
                        },
                        new
                        {
                            Id = 31,
                            Author = "Thomas Piketty",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Analyzes wealth and income inequality.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Capital in the Twenty-First Century",
                            TotalQuantity = 2
                        },
                        new
                        {
                            Id = 32,
                            Author = "Daniel Kahneman",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Also relevant to behavioral economics.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Thinking, Fast and Slow",
                            TotalQuantity = 3
                        },
                        new
                        {
                            Id = 33,
                            Author = "John Maynard Keynes",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A central work of modern macroeconomic thought.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "The General Theory of Employment, Interest and Money",
                            TotalQuantity = 2
                        },
                        new
                        {
                            Id = 34,
                            Author = "Richard H. Thaler & Cass R. Sunstein",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "Discusses nudge theory in behavioral economics.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Nudge",
                            TotalQuantity = 6
                        },
                        new
                        {
                            Id = 35,
                            Author = "Abhijit V. Banerjee & Esther Duflo",
                            AverageRating = 0.00m,
                            CategoryID = 5,
                            CreatedAt = new DateTime(2025, 5, 2, 14, 48, 2, 827, DateTimeKind.Utc).AddTicks(1186),
                            Description = "A radical rethinking of the way we fight global poverty.",
                            IsDeleted = false,
                            RatingCount = 0,
                            Title = "Poor Economics",
                            TotalQuantity = 5
                        });
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookBorrowingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestorID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproverID");

                    b.HasIndex("RequestorID");

                    b.ToTable("BookBorrowingRequests", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookBorrowingRequestDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExtensionUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OriginalDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookID");

                    b.HasIndex("RequestID");

                    b.ToTable("BookBorrowingRequestDetails", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID", "BookID")
                        .IsUnique();

                    b.ToTable("BookRatings", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Books based on imagination rather than fact.",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Books related to various scientific fields.",
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Books about past events.",
                            Name = "History"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Books concerning the study of the human mind and its functions.",
                            Name = "Psychology"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Books about the production, consumption, and transfer of wealth.",
                            Name = "Economics"
                        });
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RelatedEntityID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "NormalUser"
                        });
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.UserActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceIPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TargetEntityID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TargetEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserActivityLogs", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Book", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookBorrowingRequest", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.User", "Approver")
                        .WithMany("ApprovedBorrowings")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LibraryManagement.API.Models.Entities.User", "Requestor")
                        .WithMany("RequestedBorrowings")
                        .HasForeignKey("RequestorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookBorrowingRequestDetails", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.Book", "Book")
                        .WithMany("BorrowingDetails")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagement.API.Models.Entities.BookBorrowingRequest", "Request")
                        .WithMany("Details")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookRating", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.API.Models.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Notification", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.User", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.UserActivityLog", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("LibraryManagement.API.Models.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Book", b =>
                {
                    b.Navigation("BorrowingDetails");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.BookBorrowingRequest", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryManagement.API.Models.Entities.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("ApprovedBorrowings");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RequestedBorrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
